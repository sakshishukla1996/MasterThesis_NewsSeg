========,1,preface.
In computer science, in the context of data storage, serialization is the process of translating data structures or object state into a format that can be stored (for example, in a file or memory buffer) or transmitted (for example, across a network connection link) and reconstructed later (possibly in a different computer environment).
When the resulting series of bits is reread according to the serialization format, it can be used to create a semantically identical clone of the original object.
For many complex objects, such as those that make extensive use of references, this process is not straightforward.
Serialization of object-oriented objects does not include any of their associated methods with which they were previously linked.
This process of serializing an object is also called marshalling an object.
The opposite operation, extracting a data structure from a series of bytes, is deserialization (which is also called unmarshalling).
========,2,Uses.
***LIST***.
For some of these features to be useful, architecture independence must be maintained.
For example, for maximal use of distribution, a computer running on a different hardware architecture should be able to reliably reconstruct a serialized data stream, regardless of endianness.
This means that the simpler and faster procedure of directly copying the memory layout of the data structure cannot work reliably for all architectures.
Serializing the data structure in an architecture independent format means preventing the problems of byte ordering, memory layout, or simply different ways of representing data structures in different programming languages.
========,2,Consequences.
Serialization breaks the opacity of an abstract data type by potentially exposing private implementation details.
Trivial implementations which serialize all data members may violate encapsulation.
To discourage competitors from making compatible products, publishers of proprietary software often keep the details of their programs' serialization formats a trade secret.
Some deliberately obfuscate or even encrypt the serialized data.
Yet, interoperability requires that applications be able to understand each other's serialization formats.
Therefore, remote method call architectures such as CORBA define their serialization formats in detail.
Many institutions, such as archives and libraries, attempt to future proof their backup archives—in particular, database dumps—by storing them in some relatively human-readable serialized format.
========,2,Serialization formats.
The Xerox Network Systems Courier technology in the early 1980s influenced the first widely adopted standard.
Sun Microsystems published the External Data Representation (XDR) in 1987.
In the late 1990s, a push to provide an alternative to the standard serialization protocols started: XML was used to produce a human readable text-based encoding.
Such an encoding can be useful for persistent objects that may be read and understood by humans, or communicated to other systems regardless of programming language.
It has the disadvantage of losing the more compact, byte-stream-based encoding, but by this point larger storage and transmission capacities made file size less of a concern than in the early days of computing.
Binary XML had been proposed as a compromise which was not readable by plain-text editors, but was more compact than regular XML.
In the 2000s, XML was often used for asynchronous transfer of structured data between client and server in Ajax web applications.
JSON is a more lightweight plain-text alternative to XML which is also commonly used for client-server communication in web applications.
JSON is based on JavaScript syntax, but is supported in other programming languages as well.
YAML, is similar to JSON and includes features that make it more powerful for serialization, more "human friendly," and potentially more compact.
These features include a notion of tagging data types, support for non-hierarchical data structures, the option to structure data with indentation, and multiple forms of scalar data quoting.
Another human-readable serialization format is the property list format used in NeXTSTEP, GNUstep, and macOS Cocoa.
For large volume scientific datasets, such as satellite data and output of numerical climate, weather, or ocean models, specific binary serialization standards have been developed, e.g.
HDF, netCDF and the older GRIB.
========,2,Programming language support.
Several object-oriented programming languages directly support "object serialization" (or "object archival"), either by syntactic sugar elements or providing a standard interface for doing so.
Some of these programming languages are Ruby, Smalltalk, Python, PHP, Objective-C, Delphi, Java, and the .NET family of languages.
There are also libraries available that add serialization support to languages that lack native support for it.
***LIST***.
