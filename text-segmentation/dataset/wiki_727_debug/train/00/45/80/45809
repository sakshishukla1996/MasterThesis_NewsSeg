========,1,preface.
========,2,History.
Dijkstra thought about the shortest path problem when working at the Mathematical Center in Amsterdam in 1956 as a programmer to demonstrate capabilities of a new computer called ARMAC.
His objective was to choose both a problem as well as an answer (that would be produced by computer) that non-computing people could understand.
He designed the shortest path algorithm and later implemented it for ARMAC for a slightly simplified transportation map of 64 cities in the Netherlands (64, so that 6 bits would be sufficient to encode the city number).
A year later, he came across another problem from hardware engineers working on the institute's next computer: minimize the amount of wire needed to connect the pins on the back panel of the machine.
As a solution, he re-discovered the algorithm known as Prim's minimal spanning tree algorithm (known earlier to Jarník, and also rediscovered by Prim).
Dijkstra published the algorithm in 1959, two years after Prim and 29 years after Jarník.
========,2,Algorithm.
Let the node at which we are starting be called the initial node.
Let the distance of node "Y" be the distance from the initial node to "Y".
Dijkstra's algorithm will assign some initial distance values and will try to improve them step by step.
***LIST***.
========,2,Description.
Suppose you would like to find the "shortest path" between two intersections on a city map: a "starting point" and a "destination".
Dijkstra's algorithm initially marks the distance (from the starting point) to every other intersection on the map with "infinity".
This is done not to imply there is an infinite distance, but to note that those intersections have not yet been visited; some variants of this method simply leave the intersections' distances "unlabeled".
Now, at each iteration, select the "current intersection".
For the first iteration, the current intersection will be the starting point, and the distance to it (the intersection's label) will be "zero".
For subsequent iterations (after the first), the current intersection will be the "closest unvisited intersection" to the starting point (this will be easy to find).
From the current intersection, "update" the distance to every unvisited intersection that is directly connected to it.
This is done by determining the "sum" of the distance between an unvisited intersection and the value of the current intersection, and relabeling the unvisited intersection with this value (the sum), if it is less than its current value.
In effect, the intersection is relabeled if the path to it through the current intersection is shorter than the previously known paths.
To facilitate shortest path identification, in pencil, mark the road with an arrow pointing to the relabeled intersection if you label/relabel it, and erase all others pointing to it.
After you have updated the distances to each neighboring intersection, mark the current intersection as "visited", and select the unvisited intersection with lowest distance (from the starting point) – or the lowest label—as the current intersection.
Nodes marked as visited are labeled with the shortest path from the starting point to it and will not be revisited or returned to.
Continue this process of updating the neighboring intersections with the shortest distances, then marking the current intersection as visited and moving onto the closest unvisited intersection until you have marked the destination as visited.
Once you have marked the destination as visited (as is the case with any visited intersection) you have determined the shortest path to it, from the starting point, and can "trace your way back, following the arrows in reverse"; in the algorithm's implementations, this is usually done (after the algorithm has reached the destination node) by following the nodes' parents from the destination node up to the starting node; that's why we also keep track of each node's parent.
This algorithm makes no attempt to direct "exploration" towards the destination as one might expect.
Rather, the sole consideration in determining the next "current" intersection is its distance from the starting point.
This algorithm therefore expands outward from the starting point, interactively considering every node that is closer in terms of shortest path distance until it reaches the destination.
When understood in this way, it is clear how the algorithm necessarily finds the shortest path.
However, it may also reveal one of the algorithm's weaknesses: its relative slowness in some topologies.
========,2,Pseudocode.
In the following algorithm, the code , searches for the vertex in the vertex set that has the least value.
returns the length of the edge joining (i.e.
the distance between) the two neighbor-nodes and .
The variable on line 17 is the length of the path from the root node to the neighbor node if it were to go through .
If this path is shorter than the current shortest path recorded for , that current path is replaced with this path.
The array is populated with a pointer to the "next-hop" node on the source graph to get the shortest route to the source.
If we are only interested in a shortest path between vertices and , we can terminate the search after line 15 if .
Now we can read the shortest path from to by reverse iteration:
Now sequence is the list of vertices constituting one of the shortest paths from to , or the empty sequence if no path exists.
A more general problem would be to find all the shortest paths between and (there might be several different ones of the same length).
Then instead of storing only a single node in each entry of we would store all nodes satisfying the relaxation condition.
For example, if both and connect to and both of them lie on different shortest paths through (because the edge cost is the same in both cases), then we would add both and to .
When the algorithm completes, data structure will actually describe a graph that is a subset of the original graph with some edges removed.
Its key property will be that if the algorithm was run with some starting node, then every path from that node to any other node in the new graph will be the shortest path between those nodes in the original graph, and all paths of that length from the original graph will be present in the new graph.
Then to actually find all these shortest paths between two given nodes we would use a path finding algorithm on the new graph, such as depth-first search.
========,3,Using a priority queue.
A min-priority queue is an abstract data type that provides 3 basic operations : , and .
As mentioned earlier, using such a data structure can lead to faster computing times than using a basic queue.
Notably, Fibonacci heap or Brodal queue offer optimal implementations for those 3 operations.
As the algorithm is slightly different, we mention it here, in pseudo-code as well :
Instead of filling the priority queue with all nodes in the initialization phase, it is also possible to initialize it to contain only "source"; then, inside the block, the node must be inserted if not already in the queue (instead of performing a decrease_priority operation).
Other data structures can be used to achieve even faster computing times in practice.
========,2,Proof of correctness.
Proof is by induction on the number of visited nodes.
Invariant hypothesis: For each visited node , is the shortest distance from to ; and for each unvisited node , is the shortest distance via visited nodes only from to (if such a path exists, otherwise infinity; note we do not assume is the actual shortest distance for unvisited nodes).
The base case is when there is just one visited node, namely the initial node , and the hypothesis is trivial.
Assume the hypothesis for "n-1" visited nodes.
Now we choose an edge where has the least of any unvisited node and the edge is such that .
After processing it will still be true that for each unvisited node , is the shortest distance from to using visited nodes only, since if there were a shorter path which doesn't visit we would have found it previously, and if there is a shorter path using we update it when processing .
========,2,Running time.
========,3,Practical optimizations and infinite graphs.
In common presentations of Dijkstra's algorithm, initially all nodes are entered into the priority queue.
This is, however, not necessary: the algorithm can start with a priority queue that contains only one item, and insert new items as they are discovered (instead of doing a decrease-key, check whether the key is in the queue; if it is, decrease its key, otherwise insert it).
This variant has the same worst-case bounds as the common variant, but maintains a smaller priority queue in practice, speeding up the queue operations.
Moreover, not inserting all nodes in a graph makes it possible to extend the algorithm to find the shortest path from a single source to the closest of a set of target nodes on infinite graphs or those too large to represent in memory.
The resulting algorithm is called "uniform-cost search" (UCS) in the artificial intelligence literature and can be expressed in pseudocode as
The complexity of this algorithm can be expressed in an alternative way for very large graphs: when is the length of the shortest path from the start node to any node satisfying the "goal" predicate, each edge has cost at least , and the number of neighbors per node is bounded by , then the algorithm's worst-case time and space complexity are both in .
Further optimizations of Dijkstra's algorithm for the single-target case include bidirectional variants, goal-directed variants such as the A* algorithm (see ), graph pruning to determine which nodes are likely to form the middle segment of shortest paths (reach-based routing), and hierarchical decompositions of the input graph that reduce routing to connecting and to their respective "transit nodes" followed by shortest-path computation between these transit nodes using a "highway".
Combinations of such techniques may be needed for optimal practical performance on specific problems.
========,2,Related problems and algorithms.
The functionality of Dijkstra's original algorithm can be extended with a variety of modifications.
For example, sometimes it is desirable to present solutions which are less than mathematically optimal.
To obtain a ranked list of less-than-optimal solutions, the optimal solution is first calculated.
A single edge appearing in the optimal solution is removed from the graph, and the optimum solution to this new graph is calculated.
Each edge of the original solution is suppressed in turn and a new shortest-path calculated.
The secondary solutions are then ranked and presented after the first optimal solution.
Dijkstra's algorithm is usually the working principle behind link-state routing protocols, OSPF and IS-IS being the most common ones.
Unlike Dijkstra's algorithm, the Bellman–Ford algorithm can be used on graphs with negative edge weights, as long as the graph contains no negative cycle reachable from the source vertex "s".
The presence of such cycles means there is no shortest path, since the total weight becomes lower each time the cycle is traversed.
It is possible to adapt Dijkstra's algorithm to handle negative weight edges by combining it with the Bellman-Ford algorithm (to remove negative edges and detect negative cycles), such an algorithm is called Johnson's algorithm.
The A* algorithm is a generalization of Dijkstra's algorithm that cuts down on the size of the subgraph that must be explored, if additional information is available that provides a lower bound on the "distance" to the target.
This approach can be viewed from the perspective of linear programming: there is a natural linear program for computing shortest paths, and solutions to its dual linear program are feasible if and only if they form a consistent heuristic (speaking roughly, since the sign conventions differ from place to place in the literature).
This feasible dual / consistent heuristic defines a non-negative reduced cost and A* is essentially running Dijkstra's algorithm with these reduced costs.
If the dual satisfies the weaker condition of admissibility, then A* is instead more akin to the Bellman–Ford algorithm.
The process that underlies Dijkstra's algorithm is similar to the greedy process used in Prim's algorithm.
Prim's purpose is to find a minimum spanning tree that connects all nodes in the graph; Dijkstra is concerned with only two nodes.
Prim's does not evaluate the total weight of the path from the starting node, only the individual path.
Breadth-first search can be viewed as a special-case of Dijkstra's algorithm on unweighted graphs, where the priority queue degenerates into a FIFO queue.
The fast marching method can be viewed as a continuous version of Dijkstra's algorithm which computes the geodesic distance on a triangle mesh.
========,3,Dynamic programming perspective.
From a dynamic programming point of view, Dijkstra's algorithm is a successive approximation scheme that solves the dynamic programming functional equation for the shortest path problem by the Reaching method.
In fact, Dijkstra's explanation of the logic behind the algorithm, namely is a paraphrasing of Bellman's famous Principle of Optimality in the context of the shortest path problem.
