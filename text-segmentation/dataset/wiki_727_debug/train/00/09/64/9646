========,1,preface.
Erlang ( ) is a general-purpose, concurrent, functional programming language, as well as a garbage-collected runtime system.
The term Erlang is used interchangeably with Erlang/OTP, or OTP, which consists of the Erlang runtime system, a number of ready-to-use components mainly written in Erlang, and a set of design principles for Erlang programs.
The Erlang runtime system is known for its designs that are well suited for systems with the following characteristics:
***LIST***.
The Erlang programming language is known for the following properties:
***LIST***.
The sequential subset of the Erlang language supports eager evaluation, single assignment, and dynamic typing.
It was originally a proprietary language within Ericsson, developed by Joe Armstrong, Robert Virding and Mike Williams in 1986, but was released as open source in 1998.
Erlang/OTP is supported and maintained by the OTP product unit at Ericsson.
========,2,History.
The name "Erlang", attributed to Bjarne Däcker, has been presumed by those working on the telephony switches (for whom the language was designed) to be a reference to Danish mathematician and engineer Agner Krarup Erlang as well as a syllabic abbreviation of "Ericsson Language".
Erlang was designed with the aim of improving the development of telephony applications.
The initial version of Erlang was implemented in Prolog and was influenced by the programming language PLEX used in earlier Ericsson exchanges.
By 1988 Erlang had proven that it was suitable for prototyping telephone exchanges, but the Prolog interpreter was far too slow.
One group within Ericsson estimated that it would need to be 40 times faster in order to be suitable for production use.
In 1992 work began on the BEAM virtual machine which compiles Erlang to C using a mix of natively compiled code and threaded code to strike a balance between performance and disk space.
According to Armstrong, the language went from lab product to real applications following the collapse of the next-generation AXE exchange named "AXE-N" in 1995.
As a result, Erlang was chosen for the next ATM exchange "AXD".
In 1998 Ericsson announced the AXD301 switch, containing over a million lines of Erlang and reported to achieve a high availability of nine "9"s. Shortly thereafter, Ericsson Radio Systems banned the in-house use of Erlang for new products, citing a preference for non-proprietary languages.
The ban caused Armstrong and others to leave Ericsson.
The implementation was open-sourced at the end of the year.
Ericsson eventually lifted the ban; it re-hired Armstrong in 2004.
In 2006, native symmetric multiprocessing support was added to the runtime system and virtual machine.
========,3,Erlang Worldview.
The Erlang view of the world, as Joe Armstrong, co-inventor of Erlang, summarized in his PhD thesis:
***LIST***.
Joe Armstrong pointed out in an interview with Rackspace in 2013: “If Java is 'write once, run anywhere', then Erlang is 'write once, run forever'.”
========,3,Usage.
Erlang has now been adopted by companies worldwide, including Nortel and T-Mobile.
Erlang is used in Ericsson’s support nodes, and in GPRS, 3G and LTE mobile networks worldwide.
As Tim Bray, director of Web Technologies at Sun Microsystems, expressed in his keynote at OSCON in July 2008:
========,2,Data types.
Erlang has eight primitive data types:
***LIST***.
And three compound data types:
***LIST***.
Two forms of syntactic sugar are provided:
***LIST***.
Erlang has no method of defining classes, although there are external libraries available.
========,2,Concurrency and distribution orientation.
Erlang's main strength is support for concurrency.
It has a small but powerful set of primitives to create processes and communicate among them.
Erlang is conceptually similar to the occam programming language, though it recasts the ideas of communicating sequential processes (CSP) in a functional framework and uses asynchronous message passing.
Processes are the primary means to structure an Erlang application.
They are neither operating system processes nor operating system threads, but lightweight processes that are scheduled by Erlang's BEAM VM.
Like operating system processes (but unlike operating system threads), they share no state with each other.
The estimated minimal overhead for each is 300 words.
Thus, many processes can be created without degrading performance.
A benchmark with 20 million processes has been successfully performed.
Erlang has supported symmetric multiprocessing since release R11B of May 2006.
While threads require external library support in most languages, Erlang provides language-level features for creating and managing processes with the aim of simplifying concurrent programming.
Though all concurrency is explicit in Erlang, processes communicate using message passing instead of shared variables, which removes the need for explicit locks (a locking scheme is still used internally by the VM).
Inter-process communication works via a shared-nothing asynchronous message passing system: every process has a "mailbox", a queue of messages that have been sent by other processes and not yet consumed.
A process uses the ***codice*** primitive to retrieve messages that match desired patterns.
A message-handling routine tests messages in turn against each pattern, until one of them matches.
When the message is consumed and removed from the mailbox the process resumes execution.
A message may comprise any Erlang structure, including primitives (integers, floats, characters, atoms), tuples, lists, and functions.
The code example below shows the built-in support for distributed processes:
As the example shows, processes may be created on remote nodes, and communication with them is transparent in the sense that communication with remote processes works exactly as communication with local processes.
Concurrency supports the primary method of error-handling in Erlang.
When a process crashes, it neatly exits and sends a message to the controlling process which can then take action, such as for instance starting a new process that takes over the old process's task.
========,2,Implementation.
The Ericsson Erlang implementation loads virtual machine bytecode which is converted to threaded code at load time.
It also includes a native code compiler on most platforms, developed by the High Performance Erlang Project (HiPE) at Uppsala University.
Since October 2001 the HiPE system is fully integrated in Ericsson's Open Source Erlang/OTP system.
It also supports interpreting, directly from source code via abstract syntax tree, via script as of R11B-5 release of Erlang.
========,2,Hot code loading and modules.
Erlang supports language-level Dynamic Software Updating.
To implement this, code is loaded and managed as "module" units; the module is a compilation unit.
The system can keep two versions of a module in memory at the same time, and processes can concurrently run code from each.
The versions are referred to as the "new" and the "old" version.
A process will not move into the new version until it makes an external call to its module.
An example of the mechanism of hot code loading:
For the second version, we add the possibility to reset the count to zero.
Only when receiving a message consisting of the atom 'code_switch' will the loop execute an external call to codeswitch/1 (***codice*** is a preprocessor macro for the current module).
If there is a new version of the "counter" module in memory, then its codeswitch/1 function will be called.
The practice of having a specific entry-point into a new version allows the programmer to transform state to what is required in the newer version.
In our example we keep the state as an integer.
In practice, systems are built up using design principles from the Open Telecom Platform which leads to more code upgradable designs.
Successful hot code loading is a tricky subject; Code needs to be written with care to make use of Erlang's facilities.
========,2,Distribution.
In 1998, Ericsson released Erlang as open source to ensure its independence from a single vendor and to increase awareness of the language.
Erlang, together with libraries and the real-time distributed database Mnesia, forms the Open Telecom Platform (OTP) collection of libraries.
Ericsson and a few other companies offer commercial support for Erlang.
Since the open source release, Erlang has been used by several firms worldwide, including Nortel and T-Mobile.
Although Erlang was designed to fill a niche and has remained an obscure language for most of its existence, its popularity is growing due to demand for concurrent services.
Erlang has found some use in fielding MMORPG servers.
