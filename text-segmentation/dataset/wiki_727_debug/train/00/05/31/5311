========,1,preface.
Computer programming (often shortened to programming) is a process that leads from an original formulation of a computing problem to executable computer programs.
Programming involves activities such as analysis, developing understanding, generating algorithms, verification of requirements of algorithms including their correctness and resources consumption, and implementation (commonly referred to as coding) of algorithms in a target programming language.
Source code is written in one or more programming languages.
The purpose of programming is to find a sequence of instructions that will automate performing a specific task or solving a given problem.
The process of programming thus often requires expertise in many different subjects, including knowledge of the application domain, specialized algorithms, and formal logic.
Related tasks include testing, debugging, and maintaining the source code, implementation of the build system, and management of derived artifacts such as machine code of computer programs.
These might be considered part of the programming process, but often the term "software development" is used for this larger process with the term "programming", "implementation", or "coding" reserved for the actual writing of source code.
Software engineering combines engineering techniques with software development practices.
========,2,Overview.
Within software engineering, programming (the "implementation") is regarded as one phase in a software development process.
There is an ongoing debate on the extent to which the writing of programs is an art form, a craft, or an engineering discipline.
In general, good programming is considered to be the measured application of all three, with the goal of producing an efficient and evolvable software solution (the criteria for "efficient" and "evolvable" vary considerably).
The discipline differs from many other technical professions in that programmers, in general, do not need to be licensed or pass any standardized (or governmentally regulated) certification tests in order to call themselves "programmers" or even "software engineers" - but note that use of the term "engineer" tighty regulated in many parts of the world.
Because the discipline covers many areas, which may or may not include critical applications, it is debatable whether licensing is required for the profession as a whole.
In most cases, the discipline is self-governed by the entities which require the programming, and sometimes very strict environments are defined (e.g.
United States Air Force use of AdaCore and security clearance).
Another ongoing debate is the extent to which the programming language used in writing computer programs affects the form that the final program takes.
This debate is analogous to that surrounding the Sapirâ€“Whorf hypothesis in linguistics and cognitive science, which postulates that a particular spoken language's nature influences the habitual thought of its speakers.
Different language patterns yield different patterns of thought.
This idea challenges the possibility of representing the world perfectly with language because it acknowledges that the mechanisms of any language condition the thoughts of its speaker community.
========,2,History.
Programmable devices have existed at least as far back as 1206 AD, when the automata of Al-Jazari were programmable, via pegs and cams, to play various rhythms and drum patterns; and the 1801 Jacquard loom could produce entirely different weaves using different used by changing the "program" - a series of pasteboard cards with holes punched in them.
However, the first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage's Analytical Engine.
In the 1880s Herman Hollerith invented the concept of storing "data" in machine-readable form.
Later a control panel (plugboard) added to his 1906 Type I Tabulator allowed it to be programmed for different jobs, and by the late 1940s, unit record equipment such as the IBM 602 and IBM 604, were programmed by control panels in a similar way; as were the first electronic computers.
However, with the concept of the stored-program computers introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.
Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation.
Assembly languages were soon developed that let the programmer specify instruction in a text format, (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses.
However, because an assembly language is little more than a different notation for a machine language, any two machines with different instruction sets also have different assembly languages.
High-level languages allow the programmer to write programs in terms that are more abstract, and less bound to the underlying hardware.
They harness the power of computers to make programming easier by allowing programmers to specify calculations by entering a formula directly (e.g., ).
FORTRAN, the first widely used high-level language to have a functional implementation, came out in 1957 and many other languages were soon developed - in particular, COBOL aimed at commercial data processing, and Lisp for computer research.
Programs were mostly still entered using punched cards or paper tape.
See computer programming in the punch card era.
By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers.
Text editors were developed that allowed changes and corrections to be made much more easily than with punched cards.
========,2,Modern programming.
========,3,Quality requirements.
Whatever the approach to development may be, the final program must satisfy some fundamental properties.
The following properties are among the most important:
***LIST***.
========,3,Readability of source code.
In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code.
It affects the aspects of quality above, including portability, usability and most importantly maintainability.
Readability is important because programmers spend the majority of their time reading, trying to understand and modifying existing source code, rather than writing new source code.
Unreadable code often leads to bugs, inefficiencies, and duplicated code.
A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.
Following a consistent programming style often helps readability.
However, readability is more than just programming style.
Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.
Some of these factors include:
***LIST***.
The presentation aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the source code editor, but the content aspects reflect the programmer's talent and skills.
Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display.
Integrated development environments (IDEs) aim to integrate all such help.
Techniques like Code refactoring can enhance readability.
========,3,Algorithmic complexity.
The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problem.
For this purpose, algorithms are classified into "orders" using so-called Big O notation, which expresses resource use, such as execution time or memory consumption, in terms of the size of an input.
Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.
========,3,Methodologies.
The first step in most formal software development processes is requirements analysis, followed by testing to determine value modeling, implementation, and failure elimination (debugging).
There exist a lot of differing approaches for each of those tasks.
One approach popular for requirements analysis is Use Case analysis.
Many programmers use forms of Agile software development where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years.
There are many approaches to the Software development process.
Popular modeling techniques include Object-Oriented Analysis and Design (OOAD) and Model-Driven Architecture (MDA).
The Unified Modeling Language (UML) is a notation used for both the OOAD and MDA.
A similar technique used for database design is Entity-Relationship Modeling (ER Modeling).
Implementation techniques include imperative languages (object-oriented or procedural), functional languages, and logic languages.
========,3,Measuring language usage.
It is very difficult to determine what are the most popular of modern programming languages.
Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language, the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).
Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications.
For example, COBOL is still strong in corporate data centers often on large mainframe computers, Fortran in engineering applications, scripting languages in Web development, and C in embedded software.
Many applications use a mix of several languages in their construction and use.
New languages are generally designed around the syntax of a prior language with new functionality added, (for example C++ adds object-orientation to C, and Java adds memory management and bytecode to C++, but as a result, loses efficiency and the ability for low-level manipulation).
========,3,Debugging.
Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users.
Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages.
Use of a static code analysis tool can help detect some possible problems.
Normally the first step in debugging is to attempt to reproduce the problem.
This can be a non-trivial task, for example as with parallel processes or some unusual software bugs.
Also, specific user environment and usage history can make it difficult to reproduce the problem.
After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug.
For example, a bug in a compiler can make it crash when parsing some large source file.
However, after simplification of the test case, only few lines from the original source file can be sufficient to reproduce the same crash.
Such simplification can be done manually, using a divide-and-conquer approach.
The programmer will try to remove some parts of original test case and check if the problem still exists.
When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.
Debugging is often done with IDEs like Eclipse, Visual Studio, Xcode, Kdevelop, NetBeans and .
Standalone debuggers like GDB are also used, and these often provide less of a visual environment, usually using a command line.
Some text editors such as Emacs allow GDB to be invoked through them, to provide a visual environment.
========,2,Programming languages.
Different programming languages support different styles of programming (called "programming paradigms").
The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference.
Ideally, the programming language best suited for the task at hand will be selected.
Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute.
Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly.
It is usually easier to code in "high-level" languages than in "low-level" ones.
Allen Downey, in his book "How To Think Like A Computer Scientist", writes:
Many computer languages provide a mechanism to call functions provided by shared libraries.
Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing arguments), then these functions may be written in any other language.
========,2,Programmers.
Computer programmers are those who write computer software.
Their jobs usually involve:
***LIST***.
========,2,General Programming Reference Sheet.
Everyone is free to edit.
Please comment for suggestions, including new languages and categories.
Link: https://docs.google.com/spreadsheets/d/1vwUTaxkENXLYdyV1bYElCNL8r1b66ghzQxnOSSgG_bE/edit#gid=0
