========,1,preface.
The Post correspondence problem is an undecidable decision problem that was introduced by Emil Post in 1946.
Because it is simpler than the halting problem and the "Entscheidungsproblem" it is often used in proofs of undecidability.
========,2,Example instances of the problem.
========,3,Example 1.
Consider the following two lists:
A solution to this problem would be the sequence (3, 2, 3, 1), because Furthermore, since (3, 2, 3, 1) is a solution, so are all of its "repetitions", such as (3, 2, 3, 1, 3, 2, 3, 1), etc.
; that is, when a solution exists, there are infinitely many solutions of this repetitive kind.
However, if the two lists had consisted of only ***formula*** and ***formula*** from those sets, then there would have been no solution (the last letter of any such α string is not the same as the letter before it, whereas β only constructs pairs of the same letter).
A convenient way to view an instance of a Post correspondence problem is as a collection of blocks of the form there being an unlimited supply of each type of block.
Thus the above example is viewed as "i = 1" "i = 2" "i = 3" where the solver has an endless supply of each of these three block types.
A solution corresponds to some way of laying blocks next to each other so that the string in the top cells corresponds to the string in the bottom cells.
Then the solution to the above example corresponds to:
"i = 3" "i = 2" "i = 3" "i = 1"
========,3,Example 2.
Again using blocks to represent an instance of the problem, the following is an example that has infinitely many solutions in addition to the kind obtained by merely "repeating" a solution.
"1" "2" "3" In this instance, every sequence of the form (1, 2, 2, .
., 2, 3) is a solution (in addition to all their repetitions):
"1" "2" "2" "2" "3"
========,2,Proof sketch of undecidability.
The most common proof for the undecidability of PCP describes an instance of PCP that can simulate the computation of an arbitrary Turing machine on a particular input.
A match will occur if and only if the input would be accepted by the Turing machine.
Because deciding if a Turing machine will accept an input is a basic undecidable problem, PCP cannot be decidable either.
The following discussion is based on Michael Sipser's textbook "Introduction to the Theory of Computation".
In more detail, the idea is that the string along the top and bottom will be a computation history of the Turing machine's computation.
This means it will list a string describing the initial state, followed by a string describing the next state, and so on until it ends with a string describing an accepting state.
The state strings are separated by some separator symbol (usually written #).
According to the definition of a Turing machine, the full state of the machine consists of three parts:
***LIST***.
Although the tape has infinitely many cells, only some finite prefix of these will be non-blank.
We write these down as part of our state.
To describe the state of the finite control, we create new symbols, labelled "q" through "q", for each of the finite state machine's "k" states.
We insert the correct symbol into the string describing the tape's contents at the position of the tape head, thereby indicating both the tape head's position and the current state of the finite control.
For the alphabet {0,1}, a typical state might look something like:
101101110"q"00110.
A simple computation history would then look something like this:
"q"101#1"q"01#11"q"1#1"q"10.
We start out with this block, where "x" is the input string and "q" is the start state:
The top starts out "lagging" the bottom by one state, and keeps this lag until the very end stage.
Next, for each symbol "a" in the tape alphabet, as well as #, we have a "copy" block, which copies it unmodified from one state to the next:
We also have a block for each position transition the machine can make, showing how the tape head moves, how the finite state changes, and what happens to the surrounding symbols.
For example, here the tape head is over a 0 in state 4, and then writes a 1 and moves right, changing to state 7:
Finally, when the top reaches an accepting state, the bottom needs a chance to finally catch up to complete the match.
To allow this, we extend the computation so that once an accepting state is reached, each subsequent machine step will cause a symbol near the tape head to vanish, one at a time, until none remain.
If "q" is an accepting state, we can represent this with the following transition blocks, where "a" is a tape alphabet symbol:
There are a number of details to work out, such as dealing with boundaries between states, making sure that our initial tile goes first in the match, and so on, but this shows the general idea of how a static tile puzzle can simulate a Turing machine computation.
The previous example "q"101#1"q"01#11"q"1#1"q"10. is represented as the following solution to the Post correspondence problem:
========,2,Variants.
Many variants of PCP have been considered.
One reason is that, when one tries to prove undecidability of some new problem by reducing from PCP, it often happens that the first reduction one finds is not from PCP itself but from an apparently weaker version.
Also note that if one removes "correspondence", the problem becomes decidable.
***LIST***.
