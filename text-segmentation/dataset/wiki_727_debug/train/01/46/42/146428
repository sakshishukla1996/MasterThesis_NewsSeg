========,1,preface.
========,2,History.
Andrew Tridgell and Paul Mackerras wrote the original rsync, which was first announced on 19 June 1996.
Tridgell discusses the design, implementation, and performance of rsync in chapters 3 through 5 of his Ph.D. thesis in 1999.
It is currently maintained by Wayne Davison.
Because of the flexibility, speed, and scriptability of ***codice***, it has become a standard Linux utility, included in all popular Linux distributions.
It has been ported to Windows (via Cygwin, Grsync, or SFU), FreeBSD, NetBSD, OpenBSD, and macOS.
========,2,Examples.
A command line to mirror FreeBSD might look like:
The Apache HTTP Server supports only rsync for updating mirrors.
The preferred (and simplest) way to mirror the PuTTY website to the current directory is to use rsync.
A way to mimic the capabilities of Time Machine (macOS) - see also tym.
Make a full backup of system root directory:
========,2,Connection.
An rsync process operates by communicating with another rsync process, a sender and a receiver.
At startup, an rsync client connects to a peer process.
If the transfer is local (that is, between file systems mounted on the same host) the peer can be created with fork, after setting up suitable pipes for the connection.
If a remote host is involved, rsync starts a process to handle the connection, typically Secure Shell.
Upon connection, a command is issued to start an rsync process on the remote host, which uses the connection thus established.
As an alternative, if the remote host runs an rsync daemon, rsync clients can connect by opening a socket on TCP port 873, possibly using a proxy
Rsync has numerous command line options and configuration files to specify alternative shells, options, commands, possibly with full path, and port numbers.
Besides using remote shells, tunnelling can be used to have remote ports appear as local on the server where an rsync daemon runs.
Those possibilities allow adjusting security levels to the state of the art, while a naive rsync daemon can be enough for a local network.
========,2,Algorithm.
========,3,Determining which files to send.
By default rsync determines which files differ between the sending and receiving systems by checking the modification time and size of each file.
If time or size is different between the systems, it transfers the file from the sending to the receiving system.
As this only requires reading file directory information, it is quick, but it will miss unusual modifications which change neither.
Rsync performs a slower but comprehensive check if invoked with ***codice***.
This forces a full checksum comparison on every file present on both systems.
Barring rare checksum collisions, this avoids the risk of missing changed files at the cost of reading every file present on both systems.
========,3,Determining which parts of a file have changed.
The rsync utility uses an algorithm invented by Australian computer programmer Andrew Tridgell for efficiently transmitting a structure (such as a file) across a communications link when the receiving computer already has a similar, but not identical, version of the same structure.
The recipient splits its copy of the file into chunks and computes two checksums for each chunk: the MD5 hash, and a weaker but easier to compute 'rolling checksum'.
It sends these checksums to the sender.
The sender quickly computes the rolling checksum for each chunk in its version of the file; if they differ, it must be sent.
If they're the same, the sender uses the more computationally expensive MD5 hash to verify the chunks are the same.
The sender then sends the recipient those parts of its file that did not match, along with information on where to merge these blocks into the recipient's version.
This makes the copies identical.
There is a small probability that differences between chunks in the sender and recipient are not detected, and thus remain uncorrected.
With 128 bits from MD5 plus 32 bits from the rolling checksum, the probability is on the order of .
The rolling checksum used in rsync is based on Mark Adler's adler-32 checksum, which is used in zlib, and is itself based on Fletcher's checksum.
If the sender's and recipient's versions of the file have many sections in common, the utility needs to transfer relatively little data to synchronize the files.
If typical data compression algorithms are used, files that are similar when uncompressed may be very different when compressed, and thus the entire file will need to be transferred.
Some compression programs, such as gzip, provide a special "rsyncable" mode which allows these files to be efficiently rsynced, by ensuring that local changes in the uncompressed file yield only local changes in the compressed file.
Rsync supports other key features that aid significantly in data transfers or backup.
They include compression and decompression of data block by block using zlib, and support for protocols such as ssh and stunnel.
