========,1,preface.
Qt ( "cute") is a cross-platform application framework that is used for developing application software that can be run on various software and hardware platforms with little or no change in the underlying codebase, while still being a native application with native capabilities and speed.
Qt is currently being developed both by The Qt Company, a company listed on the Nasdaq Helsinki Stock Exchange, and the Qt Project under open-source governance, involving individual developers and firms working to advance Qt.
Qt is available with both commercial and open source GPL 2.0, GPL 3.0, and LGPL 3.0 licenses.
========,2,Purposes and abilities.
Qt is used for developing multi-platform applications and graphical user interfaces (GUIs); however, programs without a GUI can be developed, such as command-line tools and consoles for servers.
An example of a non-GUI program using Qt is the Cutelyst web framework.
GUI programs created with Qt can have a native-looking interface, in which case Qt is classified as a "widget toolkit".
It has extensive internationalization support.
Non-GUI features include SQL database access, XML parsing, JSON parsing, thread management and network support.
========,3,Programming language bindings.
Qt uses standard C++ with extensions including signals and slots that simplify handling of events, and this helps in development of both GUI and server applications which receive their own set of event information and should process them accordingly.
Qt supports many compilers, including the GCC C++ compiler and the Visual Studio suite.
Qt also provides Qt Quick, that includes a declarative scripting language called QML that allows using JavaScript to provide the logic.
With Qt Quick, rapid application development for mobile devices became possible, although logic can be written with native code as well to achieve the best possible performance.
Qt can be used in several other programming languages via language bindings.
It runs on the major desktop platforms and some of the mobile platforms.
========,2,Qt market.
========,3,Organizations using Qt.
As a commercial open source product, there are several benefits for using Qt.
Among them, performance due to being native, simplicity of API, and being cross platform has led to a wide adoption of Qt by many organization like European Space Agency, DreamWorks, Lucasfilm, Panasonic, Philips, Samsung, Siemens, Volvo, Walt Disney Animation Studios, Blizzard Entertainment, Electronic Arts, AMD, Valve Corporation.
In 2017, the Qt Company estimates a community of approximately 1 million developers worldwide in over 70 industries.
Qt company and its products are certified with many standards including ISO 9001:2008 certificate.
Qt is provided with different levels of support, for various purposes including application development and device creation.
The baseline is the community support for open source users, standard and premium support from the Qt company.
========,3,GUI and desktop environments.
Several GUIs and desktop environments utilize Qt as widget toolkit, and it is also widely used for device creation.
There are cases which famous applications have ported their entire code from other GUI toolkits to Qt, to enjoy the benefits of cross-platform native GUI with Qt.
Among them, Wireshark network packet analyzer, LXQt desktop, VLC media player and the Rosegarden audio editor have successfully switched from Gtk+ to Qt, and gained greater user base.
These are some of the well-known applications that use Qt:
***LIST***.
========,3,Editions.
There are four editions of Qt available: "Community", "Indie Mobile", "Professional" and "Enterprise".
The Community version is under the open source licenses, while the Indie Mobile, Professional and Enterprise versions, which contain additional functionality and libraries, e.g.
Charts and Data Visualization, Enterprise Controls, and Virtual Keyboard are commercially sold by The Qt Company.
========,3,Licensing.
Qt is available under the following free software licenses: GPL 3.0, LGPL 3.0 and LGPL 2.1 (with Qt special exception).
Note that some modules are only available under a GPL license, which means that applications which statically link to these modules need to comply with that license.
In addition, Qt has always been available under a commercial license, like the Qt Commercial License, that allows developing proprietary applications with no restrictions on licensing.
========,2,Software architecture.
========,3,Qt tools.
Qt comes with its own set of tools to ease cross-platform development, which can otherwise be cumbersome due to different set of development tools.
Qt Creator is a cross-platform IDE for C++ and QML.
Qt Designer's GUI layout/design functionality is integrated into the IDE, although Qt Designer can still be started as a standalone tool.
In addition to Qt Creator, Qt provides qmake, a cross-platform build script generation tool that automates the generation of Makefiles for development projects across different platforms.
Without such a tool, one would have to write different Makefiles for each platform, so it is useful for abstracting away the differences of various platforms.
There are other tools available in Qt, including the Qt Designer interface builder and the Qt Assistant help browser (which are both embedded in Qt Creator), the Qt Linguist translation tool, uic (user interface compiler), and moc (Meta-Object Compiler).
========,2,Supported platforms.
Qt works on many different platforms; the following are officially supported:
After Nokia opened the Qt source code to the community on Gitorious various ports appeared.
There are also some ports of Qt that may be available, but are not supported anymore.
These platforms are listed in List of platforms supported by Qt.
========,2,Software modules.
Starting with Qt 4.0 the framework was split into individual modules.
With Qt 5.0 the architecture was modularized even further.
Qt is now split into "essential" and "add-on" modules.
========,2,History of Qt.
The latest version of Qt is 5.9 LTS which is released on 31 May 2017, and is supported for 3 years until 31 May 2020.
The next planned version of Qt will be Qt 5.10, which is planned to be released on 30 November 2017 with several new features including initial Vulkan support for Windows, Linux and Android.
========,3,Early developments.
In the summer of 1990, Haavard Nord and Eirik Chambe-Eng (the original developers of Qt and the CEO and President, respectively, of Trolltech) were working together on a database application for ultrasound images written in C++ and running on Mac OS, Unix, and Windows.
They began development of "Qt" in 1991, three years before the company was incorporated as Quasar Technologies, then changed the name to Troll Tech and then to Trolltech.
The toolkit was called Qt because the letter Q looked appealing in Haavard's Emacs typeface, and "t" was inspired by Xt, the X toolkit.
The first two versions of Qt had only two flavors: Qt/X11 for Unix and Qt/Windows for Windows.
On 20 May 1995 Troll Tech publicly released Qt 0.90 for X11/Linux with the source code under the "Qt Free Edition License".
This license was viewed as not compliant with the open source principle by the Open Source Initiative and the free software definition by Free Software Foundation because, while the source was available, it did not allow the redistribution of modified versions.
Trolltech used this license until version 1.45.
Controversy erupted around 1998 when it became clear that the K Desktop Environment was going to become one of the leading desktop environments for Linux.
As it was based on Qt, many people in the free software movement worried that an essential piece of one of their major operating systems would be proprietary.
The Windows platform was only available under a proprietary license, which meant free/open source applications written in Qt for X11 could not be ported to Windows without purchasing the proprietary edition.
========,3,Becoming Free Software-friendly.
With the release of version 2.0 of the toolkit, the license was changed to the Q Public License (QPL), a free software license, but one regarded by the Free Software Foundation as incompatible with the GPL.
Compromises were sought between KDE and Trolltech whereby Qt would not be able to fall under a more restrictive license than the QPL, even if Trolltech was bought out or went bankrupt.
This led to the creation of the KDE Free Qt foundation, which guarantees that Qt would fall under a BSD-style license should no free/open source version of Qt be released during 12 months.
In 2000, Qt/X11 2.2 was released under the GPL v2, ending all controversy regarding GPL compatibility.
At the end of 2001, Trolltech released Qt 3.0, which added support for Mac OS X.
The Mac OS X support was available only in the proprietary license until June 2003, when Trolltech released Qt 3.2 with Mac OS X support available under the GPL.
In 2002, members of the KDE on Cygwin project began porting the GPL licensed Qt/X11 code base to Windows.
This was in response to Trolltech's refusal to license Qt/Windows under the GPL on the grounds that Windows was not a free/open source software platform.
The project achieved reasonable success although it never reached production quality.
This was resolved when Trolltech released Qt 4.0 also for Windows under the GPL in June 2005.
QtÂ 4 supported the same set of platforms in the free software/open source editions as in the proprietary edition, so it is possible, with Qt 4.0 and later releases, to create GPL-licensed free/open source applications using Qt on all supported platforms.
The GPL v3 with special exception was later added as an added licensing option.
The GPL exception allows the final application to be licensed under various GPL-incompatible free software/open source licenses such as the Mozilla Public License 1.1.
========,3,Acquisition by Nokia.
Nokia acquired Trolltech ASA on 17 June 2008 and changed the name first to Qt Software, then to Qt Development Frameworks.
Since then it focused on Qt development to turn it into the main development platform for its devices, including a port to the Symbian S60 platform.
Version 1.0 of the Nokia Qt SDK was released on 23 June 2010.
The source code was made available over Gitorious, a community oriented git source code repository, to gather an even broader community that is not only using Qt but also helping to improve it.
On 14 January 2009, Qt version 4.5 added another option, the LGPL, which should make Qt even more attractive for non-GPL open source projects and for closed applications.
In February 2011, Nokia announced its decision to drop Symbian technologies and base their future smartphones on the Windows Phone platform instead.
One month later, Nokia announced the sale of Qt's commercial licensing and professional services to Digia, with the immediate goal of taking Qt support to Android, iOS and Windows 8 platforms, and to continue focusing on desktop and embedded development, although Nokia was to remain the main development force behind the framework at that time.
========,3,Merging and demerging with Digia.
In March 2011, Nokia sold the commercial licensing part of Qt to Digia creating Qt Commercial.
In August 2012, Digia announced that it would acquire Qt from Nokia.
The Qt team at Digia started their work in September 2012.
They released Qt 5.0 within a month and newer versions every 6 months with new features and additional supported platforms.
In September 2014, Digia transferred the Qt business and copyrights to their wholly owned subsidiary, The Qt Company, which owns 25 brands related to Qt.
In May 2016, Digia and Qt demerged completely into two independent companies.
========,3,The Qt Project and open governance.
Qt 5 was officially released on 19 December 2012.
This new version marked a major change in the platform, with hardware-accelerated graphics, QML and JavaScript playing a major role.
The traditional C++-only QWidgets continued to be supported, but did not benefit from the performance improvements available through the new architecture.
Qt 5 brings significant improvements to the speed and ease of developing user interfaces.
Framework development of Qt 5 moved to open governance, taking place at qt-project.org.
There it is now possible for developers outside Digia to submit patches and have them reviewed.
========,2,References.
========,3,Bibliography.
Qt Wiki provides a comprehensive list of English books about Qt.
This is a list of notable books:
