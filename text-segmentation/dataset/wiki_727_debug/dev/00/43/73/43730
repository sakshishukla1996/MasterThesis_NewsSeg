========,1,preface.
Linear programming (LP) (also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships.
Linear programming is a special case of mathematical programming (mathematical optimization).
More formally, linear programming is a technique for the optimization of a linear objective function, subject to linear equality and linear inequality constraints.
Its feasible region is a convex polytope, which is a set defined as the intersection of finitely many half spaces, each of which is defined by a linear inequality.
Its objective function is a real-valued affine (linear) function defined on this polyhedron.
A linear programming algorithm finds a point in the polyhedron where this function has the smallest (or largest) value if such a point exists.
Linear programs are problems that can be expressed in canonical form as where x represents the vector of variables (to be determined), c and b are vectors of (known) coefficients, "A" is a (known) matrix of coefficients, and ***formula*** is the matrix transpose.
The expression to be maximized or minimized is called the "objective function" (cx in this case).
The inequalities "A"x ≤ b and x ≥ 0 are the constraints which specify a convex polytope over which the objective function is to be optimized.
In this context, two vectors are comparable when they have the same dimensions.
If every entry in the first is less-than or equal-to the corresponding entry in the second then we can say the first vector is less-than or equal-to the second vector.
Linear programming can be applied to various fields of study.
It is widely used in business and economics, and is also utilized for some engineering problems.
Industries that use linear programming models include transportation, energy, telecommunications, and manufacturing.
It has proved useful in modeling diverse types of problems in planning, routing, scheduling, assignment, and design.
========,2,History.
The problem of solving a system of linear inequalities dates back at least as far as Fourier, who in 1827 published a method for solving them, and after whom the method of Fourier–Motzkin elimination is named.
The first linear programming formulation of a problem that is equivalent to the general linear programming problem was given by Leonid Kantorovich in 1939 who was a Russian economist, who also proposed a method for solving it.
He developed it during World War II as a way to plan expenditures and returns so as to reduce costs to the army and increase losses incurred by the enemy.
About the same time as Kantorovich, the Dutch-American economist T. C. Koopmans formulated classical economic problems as linear programs.
Kantorovich and Koopmans later shared the 1975 Nobel prize in economics.
In 1941, Frank Lauren Hitchcock also formulated transportation problems as linear programs and gave a solution very similar to the later Simplex method; Hitchcock had died in 1957 and the Nobel prize is not awarded posthumously.
During 1946–1947, George B. Dantzig independently developed general linear programming formulation to use for planning problems in US Air Force.
In 1947, Dantzig also invented the simplex method that for the first time efficiently tackled the linear programming problem in most cases.
When Dantzig arranged a meeting with John von Neumann to discuss his Simplex method, Neumann immediately conjectured the theory of duality by realizing that the problem he had been working in game theory was equivalent.
Dantzig provided formal proof in an unpublished report "A Theorem on Linear Inequalities" on January 5, 1948.
Postwar, many industries found its use in their daily planning.
Dantzig's original example was to find the best assignment of 70 people to 70 jobs.
The computing power required to test all the permutations to select the best assignment is vast; the number of possible configurations exceeds the number of particles in the observable universe.
However, it takes only a moment to find the optimum solution by posing the problem as a linear program and applying the simplex algorithm.
The theory behind linear programming drastically reduces the number of possible solutions that must be checked.
The linear programming problem was first shown to be solvable in polynomial time by Leonid Khachiyan in 1979, but a larger theoretical and practical breakthrough in the field came in 1984 when Narendra Karmarkar introduced a new interior-point method for solving linear-programming problems.
========,2,Uses.
Linear programming is a widely used field of optimization for several reasons.
Many practical problems in operations research can be expressed as linear programming problems.
Certain special cases of linear programming, such as "network flow" problems and "multicommodity flow" problems are considered important enough to have generated much research on specialized algorithms for their solution.
A number of algorithms for other types of optimization problems work by solving LP problems as sub-problems.
Historically, ideas from linear programming have inspired many of the central concepts of optimization theory, such as "duality," "decomposition," and the importance of "convexity" and its generalizations.
Likewise, linear programming is heavily used in microeconomics and company management, such as planning, production, transportation, technology and other issues.
Although the modern management issues are ever-changing, most companies would like to maximize profits or minimize costs with limited resources.
Therefore, many issues can be characterized as linear programming problems.
========,2,Standard form.
"Standard form" is the usual and most intuitive form of describing a linear programming problem.
It consists of the following three parts:
***LIST***.
The problem is usually expressed in "matrix form", and then becomes:
Other forms, such as minimization problems, problems with constraints on alternative forms, as well as problems involving negative variables can always be rewritten into an equivalent problem in standard form.
========,3,Example.
Suppose that a farmer has a piece of farm land, say "L" km, to be planted with either wheat or barley or some combination of the two.
The farmer has a limited amount of fertilizer, "F" kilograms, and pesticide, "P" kilograms.
Every square kilometer of wheat requires "F" kilograms of fertilizer and "P" kilograms of pesticide, while every square kilometer of barley requires "F" kilograms of fertilizer and "P" kilograms of pesticide.
Let S be the selling price of wheat per square kilometer, and S be the selling price of barley.
If we denote the area of land planted with wheat and barley by "x" and "x" respectively, then profit can be maximized by choosing optimal values for "x" and "x".
This problem can be expressed with the following linear programming problem in the standard form:
Which in matrix form becomes:
========,2,Augmented form (slack form).
========,3,Example.
The example above is converted into the following augmented form:
where ***formula*** are (non-negative) slack variables, representing in this example the unused area, the amount of unused fertilizer, and the amount of unused pesticide.
In matrix form this becomes:
========,2,Duality.
Every linear programming problem, referred to as a "primal" problem, can be converted into a dual problem, which provides an upper bound to the optimal value of the primal problem.
In matrix form, we can express the "primal" problem as:
An alternative primal formulation is:
There are two ideas fundamental to duality theory.
One is the fact that (for the symmetric dual) the dual of a dual linear program is the original primal linear program.
Additionally, every feasible solution for a linear program gives a bound on the optimal value of the objective function of its dual.
The weak duality theorem states that the objective function value of the dual at any feasible solution is always greater than or equal to the objective function value of the primal at any feasible solution.
The strong duality theorem states that if the primal has an optimal solution, x, then the dual also has an optimal solution, y, and cx=by.
A linear program can also be unbounded or infeasible.
Duality theory tells us that if the primal is unbounded then the dual is infeasible by the weak duality theorem.
Likewise, if the dual is unbounded, then the primal must be infeasible.
However, it is possible for both the dual and the primal to be infeasible.
As an example, consider the linear program:
========,3,Example.
Revisit the above example of the farmer who may grow wheat and barley with the set provision of some "L" land, "F" fertilizer and "P" pesticide.
Assume now that "y" unit prices for each of these means of production (inputs) are set by a planning board.
The planning board's job is to minimize the total cost of procuring the set amounts of inputs while providing the farmer with a floor on the unit price of each of his crops (outputs), "S" for wheat and "S" for barley.
This corresponds to the following linear programming problem:
In matrix form this becomes:
The primal problem deals with physical quantities.
With all inputs available in limited quantities, and assuming the unit prices of all outputs is known, what quantities of outputs to produce so as to maximize total revenue?
The dual problem deals with economic values.
With floor guarantees on all output unit prices, and assuming the available quantity of all inputs is known, what input unit pricing scheme to set so as to minimize total expenditure?
To each variable in the primal space corresponds an inequality to satisfy in the dual space, both indexed by output type.
To each inequality to satisfy in the primal space corresponds a variable in the dual space, both indexed by input type.
The coefficients that bound the inequalities in the primal space are used to compute the objective in the dual space, input quantities in this example.
The coefficients used to compute the objective in the primal space bound the inequalities in the dual space, output unit prices in this example.
Both the primal and the dual problems make use of the same matrix.
In the primal space, this matrix expresses the consumption of physical quantities of inputs necessary to produce set quantities of outputs.
In the dual space, it expresses the creation of the economic values associated with the outputs from set input unit prices.
Since each inequality can be replaced by an equality and a slack variable, this means each primal variable corresponds to a dual slack variable, and each dual variable corresponds to a primal slack variable.
This relation allows us to speak about complementary slackness.
========,3,Another example.
Sometimes, one may find it more intuitive to obtain the dual program without looking at the program matrix.
Consider the following linear program:
We have "m" + "n" conditions and all variables are non-negative.
We shall define "m" + "n" dual variables: y and s. We get:
Since this is a minimization problem, we would like to obtain a dual program that is a lower bound of the primal.
In other words, we would like the sum of all right hand side of the constraints to be the maximal under the condition that for each primal variable the sum of its coefficients do not exceed its coefficient in the linear function.
For example, x appears in "n" + 1 constraints.
If we sum its constraints' coefficients we get "a"y + "a"y + ... + "a"y + "f"s. This sum must be at most c. As a result, we get:
Note that we assume in our calculations steps that the program is in standard form.
However, any linear program may be transformed to standard form and it is therefore not a limiting factor.
========,2,Variations.
========,3,Strict Inequality Constraints.
One can allow for strict inequality constraints.
In the general case, where only some inequalities are strict, we get a linear program of the form Notice that equality constraints are nothing but a special case of non-strict inequality constraints.
========,3,Covering/packing dualities.
A covering LP is a linear program of the form:
such that the matrix "A" and the vectors b and c are non-negative.
The dual of a covering LP is a packing LP, a linear program of the form:
such that the matrix "A" and the vectors b and c are non-negative.
========,4,Examples.
Covering and packing LPs commonly arise as a linear programming relaxation of a combinatorial problem and are important in the study of approximation algorithms.
For example, the LP relaxations of the set packing problem, the independent set problem, and the matching problem are packing LPs.
The LP relaxations of the set cover problem, the vertex cover problem, and the dominating set problem are also covering LPs.
Finding a fractional coloring of a graph is another example of a covering LP.
In this case, there is one constraint for each vertex of the graph and one variable for each independent set of the graph.
========,2,Complementary slackness.
It is possible to obtain an optimal solution to the dual when only an optimal solution to the primal is known using the complementary slackness theorem.
The theorem states:
Suppose that x = (x, x, ... , x) is primal feasible and that y = (y, y, ... , y) is dual feasible.
Let (w, w, ..., w) denote the corresponding primal slack variables, and let (z, z, ... , z) denote the corresponding dual slack variables.
Then x and y are optimal for their respective problems if and only if
***LIST***.
So if the "i"-th slack variable of the primal is not zero, then the "i"-th variable of the dual is equal to zero.
Likewise, if the "j"-th slack variable of the dual is not zero, then the "j"-th variable of the primal is equal to zero.
This necessary condition for optimality conveys a fairly simple economic principle.
In standard form (when maximizing), if there is slack in a constrained primal resource (i.e., there are "leftovers"), then additional quantities of that resource must have no value.
Likewise, if there is slack in the dual (shadow) price non-negativity constraint requirement, i.e., the price is not zero, then there must be scarce supplies (no "leftovers").
========,2,Theory.
========,3,Existence of optimal solutions.
Geometrically, the linear constraints define the feasible region, which is a convex polyhedron.
A linear function is a convex function, which implies that every local minimum is a global minimum; similarly, a linear function is a concave function, which implies that every local maximum is a global maximum.
An optimal solution need not exist, for two reasons.
First, if two constraints are inconsistent, then no feasible solution exists: For instance, the constraints x ≥ 2 and x ≤ 1 cannot be satisfied jointly; in this case, we say that the LP is "infeasible".
Second, when the polytope is unbounded in the direction of the gradient of the objective function (where the gradient of the objective function is the vector of the coefficients of the objective function), then no optimal value is attained.
========,3,Optimal vertices (and rays) of polyhedra.
Otherwise, if a feasible solution exists and if the (linear) objective function is bounded, then the optimum value is always attained on the boundary of optimal level-set, by the "maximum principle" for "convex functions" (alternatively, by the "minimum" principle for "concave functions"): Recall that linear functions are both convex and concave.
However, some problems have distinct optimal solutions: For example, the problem of finding a feasible solution to a system of linear inequalities is a linear programming problem in which the objective function is the zero function (that is, the constant function taking the value zero everywhere): For this feasibility problem with the zero-function for its objective-function, if there are two distinct solutions, then every convex combination of the solutions is a solution.
The vertices of the polytope are also called "basic feasible solutions".
The reason for this choice of name is as follows.
Let "d" denote the number of variables.
Then the fundamental theorem of linear inequalities implies (for feasible problems) that for every vertex x of the LP feasible region, there exists a set of "d" (or fewer) inequality constraints from the LP such that, when we treat those "d" constraints as equalities, the unique solution is x.
Thereby we can study these vertices by means of looking at certain subsets of the set of all constraints (a discrete set), rather than the continuum of LP solutions.
This principle underlies the simplex algorithm for solving linear programs.
========,2,Algorithms.
========,3,Basis exchange algorithms.
========,4,Simplex algorithm of Dantzig.
The simplex algorithm, developed by George Dantzig in 1947, solves LP problems by constructing a feasible solution at a vertex of the polytope and then walking along a path on the edges of the polytope to vertices with non-decreasing values of the objective function until an optimum is reached for sure.
In many practical problems, "" occurs: Many pivots are made with no increase in the objective function.
In rare practical problems, the usual versions of the simplex algorithm may actually "cycle".
To avoid cycles, researchers developed new pivoting rules.
In practice, the simplex algorithm is quite efficient and can be guaranteed to find the global optimum if certain precautions against "cycling" are taken.
The simplex algorithm has been proved to solve "random" problems efficiently, i.e.
in a cubic number of steps, which is similar to its behavior on practical problems.
However, the simplex algorithm has poor worst-case behavior: Klee and Minty constructed a family of linear programming problems for which the simplex method takes a number of steps exponential in the problem size.
In fact, for some time it was not known whether the linear programming problem was solvable in polynomial time, i.e.
of complexity class P.
========,4,Criss-cross algorithm.
Like the simplex algorithm of Dantzig, the criss-cross algorithm is a basis-exchange algorithm that pivots between bases.
However, the criss-cross algorithm need not maintain feasibility, but can pivot rather from a feasible basis to an infeasible basis.
The criss-cross algorithm does not have polynomial time-complexity for linear programming.
Both algorithms visit all 2 corners of a (perturbed) cube in dimension "D", the Klee–Minty cube, in the worst case.
========,3,Interior point.
========,4,Ellipsoid algorithm, following Khachiyan.
This is the first worst-case polynomial-time algorithm for linear programming.
To solve a problem which has "n" variables and can be encoded in "L" input bits, this algorithm uses "O(nL)" pseudo-arithmetic operations on numbers with "O(L)" digits.
Khachiyan's algorithm and his long standing issue was resolved by Leonid Khachiyan in 1979 with the introduction of the ellipsoid method.
The convergence analysis has (real-number) predecessors, notably the iterative methods developed by Naum Z. Shor and the approximation algorithms by Arkadi Nemirovski and D. Yudin.
========,4,Projective algorithm of Karmarkar.
Khachiyan's algorithm was of landmark importance for establishing the polynomial-time solvability of linear programs.
The algorithm was not a computational break-through, as the simplex method is more efficient for all but specially constructed families of linear programs.
However, Khachiyan's algorithm inspired new lines of research in linear programming.
In 1984, N. Karmarkar proposed a projective method for linear programming.
Karmarkar's algorithm improved on Khachiyan's worst-case polynomial bound (giving ***formula***).
Karmarkar claimed that his algorithm was much faster in practical LP than the simplex method, a claim that created great interest in interior-point methods.
Since Karmarkar's discovery, many interior-point methods have been proposed and analyzed.
========,4,Affine scaling.
Affine scaling is one of the oldest interior point methods to be developed.
It was developed in the Soviet Union in the mid-1960s, but didn't receive much attention until the discovery of Karmarkar's algorithm, after which affine scaling was reinvented multiple times and presented as a simplified version of Karmarkar's.
Affine scaling amounts to doing gradient descent steps within the feasible region, while rescaling the problem to make sure the steps move toward the optimum faster.
========,3,Comparison of interior-point methods versus simplex algorithms.
The current opinion is that the efficiency of good implementations of simplex-based methods and interior point methods are similar for routine applications of linear programming.
However, for specific types of LP problems, it may be that one type of solver is better than another (sometimes much better), and that the structure of the solutions generated by interior point methods versus simplex-based methods are significantly different with the support set of active variables being typically smaller for the later one.
LP solvers are in widespread use for optimization of various problems in industry, such as optimization of flow in transportation networks.
========,3,Approximate algorithms for covering/packing LPs.
Covering and packing LPs can be solved approximately in nearly-linear time.
That is, if matrix is of dimension and has non-zero entries, then there exist algorithms that run in time and produce approximate solutions to given covering and packing LPs.
The best known sequential algorithm of this kind runs in time , and the best known parallel algorithm of this kind runs in iterations, each requiring only a matrix-vector multiplication which is highly parallelizable.
========,2,Open problems and recent work.
There are several open problems in the theory of linear programming, the solution of which would represent fundamental breakthroughs in mathematics and potentially major advances in our ability to solve large-scale linear programs.
***LIST***.
This closely related set of problems has been cited by Stephen Smale as among the 18 greatest unsolved problems of the 21st century.
In Smale's words, the third version of the problem "is the main unsolved problem of linear programming theory."
While algorithms exist to solve linear programming in weakly polynomial time, such as the ellipsoid methods and interior-point techniques, no algorithms have yet been found that allow strongly polynomial-time performance in the number of constraints and the number of variables.
The development of such algorithms would be of great theoretical interest, and perhaps allow practical gains in solving large LPs as well.
Although the Hirsch conjecture was recently disproved for higher dimensions, it still leaves the following questions open.
***LIST***.
These questions relate to the performance analysis and development of Simplex-like methods.
The immense efficiency of the Simplex algorithm in practice despite its exponential-time theoretical performance hints that there may be variations of Simplex that run in polynomial or even strongly polynomial time.
It would be of great practical and theoretical significance to know whether any such variants exist, particularly as an approach to deciding if LP can be solved in strongly polynomial time.
The Simplex algorithm and its variants fall in the family of edge-following algorithms, so named because they solve linear programming problems by moving from vertex to vertex along edges of a polytope.
This means that their theoretical performance is limited by the maximum number of edges between any two vertices on the LP polytope.
As a result, we are interested in knowing the maximum graph-theoretical diameter of polytopal graphs.
It has been proved that all polytopes have subexponential diameter.
The recent disproof of the Hirsch conjecture is the first step to prove whether any polytope has superpolynomial diameter.
If any such polytopes exist, then no edge-following variant can run in polynomial time.
Questions about polytope diameter are of independent mathematical interest.
Simplex pivot methods preserve primal (or dual) feasibility.
On the other hand, criss-cross pivot methods do not preserve (primal or dual) feasibility—they may visit primal feasible, dual feasible or primal-and-dual infeasible bases in any order.
Pivot methods of this type have been studied since the 1970s.
Essentially, these methods attempt to find the shortest pivot path on the arrangement polytope under the linear programming problem.
In contrast to polytopal graphs, graphs of arrangement polytopes are known to have small diameter, allowing the possibility of strongly polynomial-time criss-cross pivot algorithm without resolving questions about the diameter of general polytopes.
========,2,Integer unknowns.
If all of the unknown variables are required to be integers, then the problem is called an integer programming (IP) or integer linear programming (ILP) problem.
In contrast to linear programming, which can be solved efficiently in the worst case, integer programming problems are in many practical situations (those with bounded variables) NP-hard.
0-1 integer programming or binary integer programming (BIP) is the special case of integer programming where variables are required to be 0 or 1 (rather than arbitrary integers).
This problem is also classified as NP-hard, and in fact the decision version was one of Karp's 21 NP-complete problems.
If only some of the unknown variables are required to be integers, then the problem is called a mixed integer programming (MIP) problem.
These are generally also NP-hard because they are even more general than ILP programs.
There are however some important subclasses of IP and MIP problems that are efficiently solvable, most notably problems where the constraint matrix is totally unimodular and the right-hand sides of the constraints are integers or – more general – where the system has the total dual integrality (TDI) property.
Advanced algorithms for solving integer linear programs include:
***LIST***.
Such integer-programming algorithms are discussed by Padberg and in Beasley.
========,2,Solvers and scripting (programming) languages.
Free open-source permissive licenses:
Free open-source copyleft (reciprocal) licenses:
MINTO (Mixed Integer Optimizer, an integer programming solver which uses branch and bound algorithm) has publicly available source code but is not open source.
